

安装pm2-logrotate
pm2 install pm2-logrotate

查看详细配置
pm2 conf pm2-logrotate

// 每个文件最大存储   注：10G  10M  10K
$ pm2 set pm2-logrotate:max_size 10M

// retain：保留的日志文件个数，比如设置为30，那么在日志文件达到30个后就会将最早的日志文件删除
$ pm2 set pm2-logrotate:retain 30

// 是否通过gzip压缩日志
$ pm2 set pm2-logrotate:compress false

// dateFormat 日志文件名的日期格式。如设置的日志名为out.log，就会生成out-YYYY-MM-DD_HH-mm-ss.log 的日志文件
$ pm2 set pm2-logrotate:dateFormat YYYY-MM-DD_HH-mm-ss

// 检查日志大小的时间间隔，最小为1
$ pm2 set pm2-logrotate:workerInterval 30

// 设置强制分割，默认值是0 0 * * *，意思是每天晚上0点分割
$ pm2 set pm2-logrotate:rotateInterval 0 0 * * *
    
// rotateModule 是否把pm2本身的日志也进行分割    
$ pm2 set pm2-logrotate:rotateModule true

使用pm2 list查看到pm2-logrotate 进程id为0 ，执行pm2 stop 0即可停止服务


修改之后需要重启
pm2 restart all
设置PM2开机自启动
#配置pm2服务开机启动。
pm2 startup 
#保存当前pm2 list中各应用服务状态
pm2 save



配合pm2-web实现监控可视化
pm2-web --config pm2-web-config.json
{
  "www": {
      "host": "localhost",
      "address": "0.0.0.0",
      "port": 6688
  }                         
}

node-uuid": "^1.4.8"
shortid，url友好的unique id
nvm node版本管理
cheerio，jQuery核心选择器的实现，可跑在server端，类似jsdom，但比jsdom轻量很多
superagent：类似request，使用风格跟jQuery神似。
mobile-agent: 判断是手机浏览器的访问还是pc端的访问，对做web很有用哦
cookie-parser 解析cookie
cors 处理跨域资源请求



// orm
npm install mysql
npm install mysql2
npm install sequelize

loopBack,sails,nestjs

shelljs
qr-image
moment
mariadb
mammoth
await-stream-ready
stream-wormhole
iconv-lite  
jsonwebtoken
trek-captcha
validator
xss


var compression = require('compression');
app.use(compression());

公告管理

数据备份 mysqldump 
消息提醒
消息提醒

http://es6.ruanyifeng.com/#docs/style
http://www.qdfuns.com/

mock.js

文章
 点赞
会员
    点赞 回复
二期功能
    一键登录 qq 微信
支付功能
    支付宝 微信 网银
www.metinfo.cn

//雅丰工作室
http://www.htmcss.com/
http://www.yinhecn.com/

www.a8net.com

http://www.ipp114.com/
http://www.wz010.net/
http://www.jiatenet.com/
http://www.yemiansheji.cn/
http://www.t17178.com/
http://www.90show.net/

Linux部署nodejs web项目
http://blog.csdn.net/q3585914/article/details/75306447
1. 首次部署需安装nodejs、npm、pm2

Ubuntu:
sudo apt-get update
sudo apt-get install nodejs
sudo apt-get install npm
sudo npm install pm2 -g


centos:
yum install nodejs
yum install npm
npm install pm2 -g
2. 直接部署项目，安装依赖包

cd 项目目录
npm install
3. 使用PM2运行及配置Nginx

cd 项目目录
pm2 start bin/www      
查看服务
重启服务

pm2 list
pm2 restart 0

https://segmentfault.com/a/1190000004051670


开发日期 2017-09-27
开发日期 2017-09-30 完成导航 首页 列表页 

http://boy.tuniu.com/svn/CDN/site_new/JDBU CDN
http://boy.tuniu.com/svn/JDB/PJDM/branch  JD-H5
http://boy.tuniu.com/svn/JDB/PLA/branch  JSP
http://boy.tuniu.com/svn/JDB/PFMP/branch JD-PC-MP

https://github.com/capricorncd/image-process-tools



我是在windows下做试验的，接下来以windows为例：
1首先下载nginx:
http://nginx.org/
2 到C:\Windows\System32\drivers\etc\目录下修改hosts文件，加入你要映射的域名如下：
127.0.0.1 dpa.xxx.com
127.0.0.1 dcas.xxx.com
然后启动一下nginx试试效果，会发现localhost,dpa.xxx.com, dcas.xxx.com都会访问到nginx首页：

Windows启动nginx双击nginx.exe就可以。
这样我们就完成了想要的一部分，那么接下来配置一下nginx就可以了。
3 配置conf下的nginx.conf文件
那我们就写个域名和端口的对应关系如下：
localhost      8088
dpa.xxx.com   8080
dcas.xxx.com   8090
具体的配置如下：346167
server {
       listen       80;
       server_name  dcas.xxx.com;
       location / {
                     proxy_passhttp://127.0.0.1:8090/;
              }
    }
       server{
       listen       80;
       server_name  dpa.xxx.com;欧
       location / {
                     proxy_passhttp://127.0.0.1:8080/;
              }
    }
       server{
       listen       80;
       server_name  localhost;
       location / {
                     proxy_passhttp://127.0.0.1:8088/;
              }
}


cms完整视频教程+源码 孔浩老师 全131讲
《尚学堂CMS文章内容管理系统视频教程》


https://www.metinfo.cn/

CSS3页面动画
wow 
fullpage
http://www.w3cplus.com/css3/trigger-css-animation-scroll.html
http://mynameismatthieu.com/WOW/

CSS 网易方案 http://nec.netease.com/
PC端 ->Amaze layui
    bootstrap UIkit  pintuer

    
移动端UI框架->SUI、MUI、WeUI
    sui aui framework weui mui http://mint-ui.github.io/#!/zh-cn

图表
    antv

user
active 激活
uqn   唯一值
为了防止恶意攻击 注册需要加入验证码
敏感用户名限制 https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013760174128707b935b0be6fc4fc6ace66c4f15618f8d000
邮件激活 active 
//      1.数据库加两个字，state字段（0:未激活，1：激活成功），ActiCode:(放激活码)  
//      2.用户填写资料，插入数据成功，state字段默认是0,同时生成一个ActiCode也存入数据库  
//      3.提示用户激活。。。发送邮件。。。邮件中带一个激活成功页的URL，URL里有两个参数（1，用户ID，2：激活码）  
//      4.用户点击链接，回到激活成功页。。。激活成功页的Load事件，得到两个参数，以这两个参数为条件查询数据库里的数据，如果有，修改字段state为1,反之。。提示激活失败，重新激活。。   

用户唯一标识符 每次修改后 更改唯一标识符 在存入cookie(安全性保证)
给会员发送短信 message
ys_message
id
touser 收信人
fromuser 发信人
content 发信内容
date发布时间
state 阅读状态

添加好友 friend
id
touser 被添加的好友
fromuser 添加人
content 请求验证信息
state 验证状态
date 添加时间

送花 flower
id
touser 收花者
fromuser 送花者
flower 送的个数
contetn 感言
date 送花时间

帖子表 article
id
username 
type发帖类型
title 帖子标题
content 帖子内容
date 发帖时间
readcount 阅读量
commendcount 评论量


同时更新redis myql 读取的时候 只读取redis


回帖
帖子id
帖子类型type

场景A
这种场景下一般评论数量较少，评论不为活跃，
可以把不区分评论和回复，而统一看成评论。

区别在于有的评论是直接评论主题(每个评论都挂在某个主题下，如文章、帖子等)，
而有些评论是@其他用户的，为了能cover这两张场景，使用一张表就可以达到效果，评论表如下设计：

表字段	字段说明
id	主键
topic_id	主题ID
topic_type	主题type
content	评论内容
from_uid	评论用户id
to_uid	评论目标用户id
为了能复用评论模块，我们引入一个topic_type字段来区分主题的类别。



from_uid表示评论人的id，通过该id我们可以检索到评论人的相关信息。

to_uid是评论目标人的id，如果没有目标人，则该字段为空。

出于性能的考虑，往往我们会冗余评人的相关信息到评论表中，比如评论人的nick、头像等，目标用户也是如此。这样一来我们就只用查询单表就可以达到显示的效果。

有时，目标用户有多个，那么可以将to_uid字段修改为to_uids，保存时用分隔符来分割用户id，而目标用户的信息再去查询缓存或者数据库。也可以简单的将多个目标用户的信息一起存成json格式，可以应付简单的展现需求。
<script src="https://google.github.io/traceur-compiler/bin/traceur.js"></script>
<script src="https://google.github.io/traceur-compiler/bin/BrowserSystem.js"></script>
<script src="https://google.github.io/traceur-compiler/src/bootstrap.js"></script>
<script type="module">
import './Greeter.js';
</script>

云计算 
庞大数据 ->map()打散->小任物1 ->结果1->
                   ->小任物2 ->结果2_>reduce ->最终结果
                   ->小任物2 ->结果3->
/reduce() 汇总


generator yield 分部执行 function *

function* show(){
    yield 12;
    yield 5;
}

var gen = show();
gen.next() 返回第一个yield 类似return
gent.next() 返回第一个yield


promise      优化回调
fetch

const koa = require('koa);
const server = koa();

server.use(function*(next){
    yield next;
    this.body = 'abc';
});


1.删
DELECT FROM 表 WHERE 条件

2.增
INSERT INTO 表 （字段列表） VALUES (值列表)

3.改
UPDATE 表 SET 字段=值,字段=值,... WHERE 条件

4.查
SELECT * FROM 表 WHERE 条件

子句
   WHERE 条件
	 WHERE name='blue'
	 WHERE age>18
	 WHERE age<=18
	 WHERE age>=18 AND score<60
	 WHERE score>100 OR score>1000
----------------------------------------------
   ORDER 排序

   ORDER BY age ASC/DESC
   	 ASC-升序（从小到大）
   	 DESC-降序（从大到小）

   ORDER BY price ASC


   *价格（price）升序排序，如果价格相同，再按照销量(sales)降序排序

   ORDER BY price ASC, sales DESC
-------------------------------------------------
GROUP 聚类-合并相同的,合并数据
*统计每个班的人数 COUNT MIN MAX AVG
COUNT   
SELECT * FROM stucent_table GROUP BY class;
班级数量
SELECT class,COUNT(class) FROM stucent_table GROUP BY class;
不同班级平均分
SELECT class,AVG(SCORE) FROM stucent_table GROUP BY class;
每个班级的最高分和最低分
SELECT class,MAX(score),MIN(score) FROM stucent_table GROUP BY class;

每个人消费总额
SELECT name,SUM(price) FROM sales_table GROUP BY name;

SELECT name,SUM(price) FROM sales_table GROUP BY name ORDER BY SUM(price) DESC;

SELECT name,SUM(price) FROM sales_table GROUP BY name ORDER BY SUM(price) ASC;
-----------------------------------------------------------------
LIMIT-分页

LIMIT 10; 前10条
LIMIT 0，20
右键数据库>转成sql
右键运行sql文件

--------------------------------------------
子句之间有顺序
WHERE GROUP  ORDER LIMIT
筛选  合并   排序  限制
SELECT class,COUNT(class) FROM stucent_table
WHERE score>60
GROUP BY class
ORDER BY COUNT(class) DESC
LIMIT 2;

------------------------------------------------------
1.数据字典

2.后台接口 静态资源



跨域资源共享
npm install --save cors
api子域名
npm install --save vhost
跨站请求伪造
npm install --save csurf 
express-validator


//记录日志 不区分路由和方法，全局匹配 中间件顺序很重要
//路由限定规则的中间件，use全局中间件
// app.use((req,res,next)=>{
// 	console.log(req.method, req.url, Date.now());
// 	//交出执行权，继续往后匹配执行
// 	next()
// })

<div m-2 rounded text-teal-400 />

<button 
  bg="blue-400 hover:blue-500 dark:blue-500 dark:hover:blue-600"
  text="sm white"
  font="mono light"
  p="y-2 x-4"
  border="2 rounded blue-200"
>
  Button
</button>